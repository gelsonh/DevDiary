@model DevDiary.Models.BlogPost
@using DevDiary.Enums;
@using DevDiary.Services.Interfaces;
@inject IImageService _ImageService

@{
    ViewData["Title"] = "Edit";
}
<style>

    #Content {
        height: 200px; /* Puedes ajustar la altura según tus preferencias */
    }

</style>

<div class="container mt-5">


    <div class="row">
        <div class="col-12">
            <!-- ----------------------------------------- -->
            <!-- 1. Basic Form -->
            <!-- ----------------------------------------- -->
            <div class="card">
                <div class="card-body">
                    <h4 class="card-title mb-3 pb-3 border-bottom">Edit</h4>
                    <form asp-action="Edit" method="post" enctype="multipart/form-data">
                        <div asp-validation-summary="ModelOnly" class="text-danger"></div>
                        <input type="hidden" asp-for="Id" />
                        <input type="hidden" asp-for="Created" />
                        <input type="hidden" asp-for="Slug" />
                        <input type="hidden" asp-for="ImageData" />
                        <input type="hidden" asp-for="ImageType" />

                        <div class="row">
                            <div class="col-md-6">
                                <div class="form-floating mb-3">
                                    <input asp-for="Title" type="text" class="form-control" id="tb-fname" placeholder="Enter Name here" />
                                    <label asp-for="Title" for="tb-fname">Title</label>
                                    <span asp-validation-for="Title" class="text-danger"></span>
                                </div>
                            </div>
                            <div class="col-md-6">
                                <div class="form-floating mb-3">
                                    <input asp-for="Abstract" type="text" class="form-control" id="tb-abstract" placeholder="Enter Abstract here" />
                                    <label asp-for="Abstract" for="tb-abstract">Abstract</label>
                                    <span asp-validation-for="Abstract" class="text-danger"></span>
                                </div>
                            </div>
                            <div class="col-6">
                                <div class="form-floating mb-3">
                                    <label asp-for="Content" class="control-label"></label>
                                    <textarea asp-for="Content" class="editor form-control"></textarea>
                                    <span asp-validation-for="Content" class="text-danger"></span>
                                </div>
                            </div>



                            <div class="col-4">
                                <div class="form-group">
                                    <label asp-for="CategoryId" class="control-label">Category</label>
                                    <select asp-for="CategoryId" class="form-control" asp-items="ViewBag.CategoryId"></select>
                                    <span asp-validation-for="CategoryId" class="text-danger"></span>
                                </div>
                            </div>
                            <div class="col-12 col-lg-4">
                                <div class="square-img-container">
                                    <img id="contactImage" class="square-img" src="@(Model.ImageData != null ? _ImageService.ConvertByteArrayToFile(Model.ImageData, Model.ImageType, DefaultImage.BlogPostImage) : "/img/Default-Image.png")" alt="" />
                                </div>
                                <div>
                                    <input asp-for="ImageFile" class="form-control" accept=".png,.jpg,.jpeg,.gif" onchange="document.getElementById('contactImage').src = window.URL.createObjectURL(this.files[0])" />
                                    <span asp-validation-for="ImageFile" class="text-danger"></span>
                                </div>
                            </div>

                            <div class="row">
                                <div class="col-2 col-lg-2">
                                    <div class="form-group form-check d-flex align-items-center">
                                        <label class="form-check-label me-2" style="font-size: 14px;">
                                            <input class="form-check-input" asp-for="IsPublished" style="transform: scale(0.5);" /> @Html.DisplayNameFor(model => model.IsPublished)
                                        </label>
                                    </div>
                                </div>
                                <div class="col-2 col-lg-2">
                                    <div class="form-group form-check d-flex align-items-center">
                                        <label class="form-check-label me-2" style="font-size: 14px;">
                                            <input class="form-check-input" asp-for="IsDeleted" style="transform: scale(0.5);" /> @Html.DisplayNameFor(model => model.IsDeleted)
                                        </label>
                                    </div>
                                </div>


                                <div class="form-group">
                                    <input type="submit" value="Save" class="btn btn-primary" />
                                </div>
                            </div>
                        </div>
                    </form>

                </div>
            </div>

        </div>
    </div>


    <div>
        <a asp-action="Index">Back to List</a>
    </div>
    @section Scripts {
        @{
            await Html.RenderPartialAsync("_ValidationScriptsPartial");
        }
        <script src="https://code.jquery.com/jquery-3.6.4.min.js"></script>

        <script src="https://cdn.ckeditor.com/ckeditor5/40.1.0/classic/ckeditor.js"></script>

        <script>
            class MyUploadAdapter {
                constructor(loader) {
                    this.loader = loader;
                }

                upload() {
                    return this.loader.file
                        .then(file => new Promise((resolve, reject) => {
                            const data = new FormData();
                            data.append('upload', file);

                            const xhr = new XMLHttpRequest();
                            xhr.open('POST', 'https://devdiary-production.up.railway.app', true);

                            xhr.onload = () => {
                                if (xhr.status === 200) {
                                    try {
                                        // Verificar si la respuesta es JSON antes de intentar parsear
                                        const contentType = xhr.getResponseHeader('Content-Type');
                                        console.log('Respuesta del servidor:', xhr.responseText);
                                        if (contentType && contentType.indexOf('application/json') !== -1) {
                                            const response = JSON.parse(xhr.responseText);
                                            const imageUrl = 'data:image/jpeg;base64,' + response.imageFileString;
                                            resolve({
                                                default: imageUrl
                                            });
                                        } else {
                                            reject('La respuesta del servidor no es JSON');
                                        }
                                    } catch (error) {
                                        reject('La respuesta del servidor no es un JSON válido');
                                    }
                                } else {
                                    reject('No se pudo cargar la imagen');
                                }
                            };

                            xhr.onerror = () => {
                                reject('Error al cargar la imagen');
                            };
                            xhr.send(data);
                        }));
                }

                // Otros métodos necesarios...
            }

            // Resto del código...

            document.addEventListener('DOMContentLoaded', function () {
                ClassicEditor
                    .create(document.querySelector('.editor'), {
                        licenseKey: '',
                        editorconfig: {
                            enterMode: 2,
                            shiftEnterMode: 2
                        }
                    })
                    .then(editor => {
                        window.editor = editor;

                        // Configura MyUploadAdapter como el adaptador de carga
                        editor.plugins.get('FileRepository').createUploadAdapter = function (loader) {
                            return new MyUploadAdapter(loader);
                        };
                    });
            });

        </script>

    }
</div>




